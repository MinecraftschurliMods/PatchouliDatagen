subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
            vendor = JvmVendorSpec.ADOPTOPENJDK
        }
        withSourcesJar()
        withJavadocJar()
    }

    archivesBaseName = "${mod_name}-${project.name.toLowerCase()}-${minecraft_version}"

    jar {
        from("LICENSE") {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            mainAttributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version,
                'LICENSE'                 : 'MIT'
            ])
        }
    }
    
    repositories {
        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }
    

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    publishing {
        publications {
            publications.create(project.name+'ToMaven', MavenPublication) {
                groupId project.group
                artifactId project.archivesBaseName
                version project.version
                //from components.java
                artifact jar
                pom {
                    name = project.name
                    url = project.url
                    packaging = 'jar'
                    scm {
                        connection = "scm:git:git://github.com/${project.github}.git"
                        developerConnection = "scm:git:git@github.com:${project.github}.git"
                        url = "https://github.com/${project.github}"
                    }
                    issueManagement {
                        system = 'github'
                        url = "https://github.com/${project.github}.git/issues"
                    }
                    organization {
                        name = 'Minecraftschurli Mods'
                        url = 'https://github.com/Minecraftschurli'
                    }
                    developers {
                        developer {
                            id = 'minecraftschurli'
                            name = 'Minecraftschurli'
                            email = 'minecraftschurli@gmail.com'
                            organization = 'Minecraftschurli Mods'
                            organizationUrl = 'https://github.com/Minecraftschurli'
                            timezone = 'Europe/Vienna'
                        }
                    }
                    licenses {
                        license {
                            name = 'MIT'
                            url = "https://github.com/${project.github}/blob/main/LICENSE"
                            distribution = 'repo'
                        }
                    }
                    withXml {
                        asNode().dependencies.dependency.each { dep ->
                            if(dep.version.last().value().last().contains('_mapped_')) {
                                assert dep.parent().remove(dep)
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if ((System.getenv("MAVEN_USER") != null) &&
                        (System.getenv("MAVEN_PASSWORD") != null) &&
                        (System.getenv("MAVEN_URL") != null)
                ) {
                    url System.getenv("MAVEN_URL")
                    credentials {
                        username System.getenv("MAVEN_USER")
                        password System.getenv("MAVEN_PASSWORD")
                    }
                } else {
                    url "$buildDir/repo"
                }
            }
        }
    }
}
