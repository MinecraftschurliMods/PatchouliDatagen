import org.ajoberstar.grgit.Grgit
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.8', ext: 'pom'
        classpath group: 'org.apache.maven', name: 'maven-plugin-api', version: '3.8.1'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: "${project.librarian_version}"
    }
}

plugins {
    id 'org.ajoberstar.grgit'
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
//=============================================
def grgit = Grgit.open(currentDir: project.projectDir)

group = "${project.lib_group}"
version = "${project.mc_version}-${project.lib_version}"
archivesBaseName = "${project.lib_name}"


if (System.getenv('RELEASE_TYPE') != null) {
    status = System.getenv('RELEASE_TYPE')
    switch (status) {
        case 'snapshot':
            version = "${version}+${grgit.head().abbreviatedId}"
            break
        case 'alpha':
        case 'beta':
        case 'final':
            version = "${version}-${status}"
            break
    }
}

sourceSets.main.java.srcDirs = ['src/main/java']

java {
    withSourcesJar()
    withJavadocJar()
    archivesBaseName = project.archivesBaseName
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

minecraft {
    mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
}

configurations {
    deobfJar {
        canBeConsumed = true
        canBeResolved = false
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'Minecraftschurli Maven'
        url = 'https://minecraftschurli.ddns.net/repository/maven-public'
    }
    maven {
        name = 'blamejared Maven'
        url = 'https://maven.blamejared.com'
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.mc_version}-${project.forge_version}"
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}:api")
    compileOnly 'org.jetbrains:annotations:22.0.0'
}

javadoc {
    options.encoding = 'UTF-8'
    options.tags = [
            'side:a:Side:',
            'apiNote:a:API Note:',
            'implSpec:a:Implementation Requirements:',
            'implNote:a:Implementation Note:'
    ]
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    finalizedBy('reobfJar')
}

task deobfJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
}

tasks.withType(Jar) {
    manifest {
        attributes([
                'Specification-Title'   : archivesBaseName,
                'Specification-Vendor'  : "${project.lib_vendor}",
                'Specification-Version' : '1',
                'Implementation-Title'  : archivesBaseName,
                'Implementation-Version': "${project.lib_version}",
                'Implementation-Vendor' : "${project.lib_vendor}",
                'Built-On-Java'         : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On'              : "${project.mc_version}-${project.forge_version}",
                'Timestamp'             : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLModType'            : 'GAMELIBRARY',
                'FMLModLoader'          : 'javafml',
                'FMLLoaderVersion'      : '[37,)',
                'LICENSE'               : 'MIT'
        ])
    }
}

artifacts {
    archives jar
    archives deobfJar
    archives sourcesJar
    archives javadocJar
    deobfJar(deobfJar)
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications.create(project.archivesBaseName+'ToMaven', MavenPublication) {
        artifacts = [deobfJar]
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        from components.java
        pom {
            name = project.name
            url = project.url
            packaging = 'jar'
            scm {
                connection = "scm:git:git://github.com/${project.github}.git"
                developerConnection = "scm:git:git@github.com:${project.github}.git"
                url = "https://github.com/${project.github}"
            }
            issueManagement {
                system = 'github'
                url = "https://github.com/${project.github}.git/issues"
            }
            organization {
                name = 'Minecraftschurli Mods'
                url = 'https://github.com/Minecraftschurli'
            }
            developers {
                developer {
                    id = 'minecraftschurli'
                    name = 'Minecraftschurli'
                    email = 'minecraftschurli@gmail.com'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/Minecraftschurli'
                    timezone = 'Europe/Vienna'
                }
            }
            licenses {
                license {
                    name = 'MIT'
                    url = "https://github.com/${project.github}/blob/main/LICENSE"
                    distribution = 'repo'
                }
            }
            withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(dep.version.last().value().last().contains('_mapped_')) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (
            (System.getenv("MAVEN_USER") != null) &&
                    (System.getenv("MAVEN_PASSWORD") != null) &&
                    (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}

publish {
    dependsOn check
}
